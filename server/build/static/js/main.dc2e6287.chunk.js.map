{"version":3,"sources":["Functions/GetData.js","LoadingPage/index.js","Client/command/index.js","Client/index.js","Guilds/Guild/ShortGuild.js","Guilds/index.js","Guilds/Guild/MemberList/index.js","Guilds/Guild/Member/index.js","Guilds/Guild/MemberList/MemberWrapper.js","Guilds/Guild/TextChannel/FullTextChannel.js","Guilds/Guild/TextChannel/index.js","Guilds/Guild/VoiceChannel/index.js","Guilds/Guild/FullGuild.js","Navigator/index.js","Footer/index.js","ErrorBoundary/index.js","User/index.js","App.js","index.js"],"names":["link","options","a","from","Promise","resolve","reject","axios","get","then","data","Array","isArray","length","maxSize","slice","catch","err","index","LoadingBar","content","state","i","className","style","animation","background","hex","id","width","position","top","left","color","String","includes","command","ActivatedCSSClassName","loading","this","setState","name","onClick","SaveCommand","defaultValue","description","Component","client","SelectedCommand","getData","user","commands","LoadData","username","map","key","ToggleCommand","guild","console","log","alt","src","iconURL","guilds","GuildList","textDecoration","to","member","ProxyUrl","guildID","userID","GetData","FullMember","displayHexColor","Math","floor","random","bot","tag","avatarURL","borderRadius","defaultAvatarURL","height","marginLeft","ExampleWrapper","hasNextPage","isNextPageLoading","items","loadNextPage","itemCount","loadMoreItems","isItemLoaded","Item","CustomStyle","onItemsRendered","ref","itemSize","FullTextChannel","channel","embed","title","url","timestamp","footer","icon_url","text","thumbnail","image","author","isEmbed","e","newEmbed","Object","keys","forEach","value","subKey","post","message","input","preventDefault","prevState","event","ParamName","SubParam","persist","target","MessageBox","onHeightChange","maxLength","type","placeholder","onChange","handleOnChange","padding","onSubmit","handleText","toggleEmbedMode","bind","marginTop","marginRight","path","FullGuild","_loadNextPage","args","setTimeout","concat","fill","empty","members","FullGuildData","membersChunk","chunk","j","push","channels","roles","FetchedGuildData","ChannelList","category","parentID","JSXChannels","display","document","getElementById","overflowY","fontSize","ErrorBoundary","props","hasError","error","info","children","React","Page","discriminator","href","App","useState","v","jsxv","l","setLoading","MemberListLoading","setGuilds","MemberPage","setMemberPage","observer","useRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","p","observe","useEffect","stack","LoadingPage","component","match","params","BaseGuild","filter","g","ShowGuild","ReactDOM","render"],"mappings":"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","file":"static/js/main.dc2e6287.chunk.js","sourcesContent":["import axios from 'axios';\r\nexport default (async function getData(link, options) {\r\n    let proxyUrl = `http://localhost:5000/api/`;\r\n    if(!options)\r\n        options = { from: 0 };\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            axios.get(`${proxyUrl}${link}`)\r\n            .then(({ data }) => {\r\n                if(Array.isArray(data) && data.length > (options.maxSize ? options.maxSize+options.from : data.length))\r\n                    data = data.slice(options.from, options.maxSize+options.from)\r\n                resolve(data);\r\n            })\r\n            .catch(err => reject(err));\r\n        } catch (err) {\r\n            reject(err);\r\n        }\r\n    });\r\n})","import React from 'react';\r\nimport './index.css';\r\n\r\nexport default function index({ content, state}) {\r\n    let LoadingBar;\r\n    if(state.i === 'infinite') {\r\n        LoadingBar = <div className=\"loading-bar\" style={{ animation: \"move 2s linear infinite\", background: state.hex }} id=\"loading-bar\" />\r\n    }\r\n    else {\r\n        LoadingBar = <div className=\"loading-bar\" id=\"loading-bar\" style={{ width: state.i * 200, background: state.hex }} />\r\n    }\r\n    return (\r\n        <>\r\n        <div style={{ position: \"absolute\", top: \"50%\", left: \"40%\"}}>\r\n            <div className=\"bar\">\r\n                { LoadingBar }\r\n            </div>\r\n            <h1 className=\"text\" style={{ color: String(content).includes('Error') ? \"#808080\" : \"#818199\" }}>{ String(content).includes('Error') ? 'Error has occurred' : content }</h1>\r\n        </div>\r\n        </>\r\n    )\r\n}","import LoadingPage from '../../LoadingPage/index';\r\nimport React, { Component } from 'react'\r\nimport './index.css';\r\n\r\nexport default class command extends Component {\r\n    constructor({ command }) {\r\n        super();\r\n        \r\n        this.state = {\r\n            command: command,\r\n            ActivatedCSSClassName: 'active',\r\n            loading: true\r\n        };\r\n    }\r\n\r\n    LoadData() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                resolve();\r\n            } catch (err) {\r\n                reject(err)\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: false }));\r\n    }\r\n\r\n    SaveCommand(command) {\r\n        this.setState(command)\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: 2, hex: \"#A4D792\" }}/>\r\n\r\n        return (\r\n            <div className={ this.ActivatedCSSClassName }>\r\n                SELECTED { this.state.command.name } \r\n                <button className=\"button\" onClick={() => this.SaveCommand(this.state.command) }>Save</button>\r\n                <br/>\r\n\r\n                Description:\r\n                <br/> \r\n                <textarea defaultValue={ this.state.command.description } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport getData from './../Functions/GetData';\r\nimport LoadingPage from '../LoadingPage/index';\r\nimport Command from './command/index';\r\nimport './index.css';\r\n\r\nexport default class index extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            loading: true,\r\n            client: {}, \r\n            SelectedCommand: null, \r\n            ActivatedCSSClassName: 'active' \r\n        };\r\n\r\n    }\r\n    \r\n    ToggleCommand(command) {\r\n        this.setState(state => ({ \r\n            ...state,\r\n            SelectedCommand: command.name, \r\n        }));\r\n    }\r\n\r\n    LoadData() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let client = await getData('client');\r\n                client.user = await getData('client/user');\r\n                client.commands = await getData('client/commands');\r\n                resolve(client);\r\n            } catch (err) {\r\n                reject(err)\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: true }));\r\n        this.LoadData()\r\n        .then(data => {\r\n            this.setState(state => ({ ...state, client: data, loading: false }));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: 2, hex: \"#A4D792\" }}/>\r\n\r\n        return (\r\n            <div className=\"client\">\r\n                { this.state.client.user.username }'s Commands\r\n                <hr/>\r\n                <div className=\"command-container\">\r\n                { this.state.client.commands.map(command => (\r\n                    <div className=\"command\" key={command.name} onClick={() => this.ToggleCommand(command)}>\r\n                        { this.state.SelectedCommand !== command.name ? <p className=\"command_name\">{ command.name }</p> : <Command command={command} /> }\r\n                    </div> \r\n                ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// export default function index({ this.state.client, SelectedCommandName, setSelectedCommandName }) {\r\n\r\n//     const ToggleCommand = (command) => {\r\n//         setSelectedCommandName(SelectedCommandName === command.name ? SelectedCommandName : command.name);\r\n//     };\r\n//     return (\r\n//         <div className=\"this.state.client\">\r\n//             { this.state.client.user.tag }\r\n\r\n//             { this.state.client.commands.map(command => (\r\n//                 <div className=\"command\" onClick={() => ToggleCommand(command)}>\r\n//                     { SelectedCommandName !== command.name ? command.name : <Command command={command}/> }\r\n//                 </div> \r\n//             ))}\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n","import React, { Component } from 'react';\r\nimport './ShortGuild.css';\r\n\r\nexport default class index extends Component {\r\n    constructor({ guild }) {\r\n        super();\r\n\r\n        this.state = {};\r\n\r\n        this.guild = guild;\r\n    }\r\n\r\n    openGuild() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ShortGuild\" onClick={() => console.log('CLICKED') }>\r\n                <img alt=\"\" className=\"ShortGuild_icon\" src={ this.guild.iconURL || 'https://cdn.discordapp.com/icons/657586144791363594/5f8627ef6dc69b914ed90c3e029a9fbc.webp?size=128' }></img>\r\n                <p className=\"ShortGuild_name\"> {this.guild.name} </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport getData from './../Functions/GetData';\r\nimport LoadingPage from '../LoadingPage/index';\r\nimport ShortGuild from './Guild/ShortGuild.js';\r\nimport './index.css';\r\n\r\nexport default class index extends Component {\r\n    constructor() {\r\n        super();\r\n        \r\n        this.state = { \r\n            guilds: [],\r\n            loading: true\r\n        };\r\n    }\r\n\r\n    LoadData() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let guilds = await getData('client/guilds/cache');\r\n                resolve(guilds);\r\n            } catch (err) {\r\n                reject(err)\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: true }));\r\n        this.LoadData()\r\n        .then(data => {\r\n            this.setState(state => ({ ...state, guilds: data, loading: false }));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: 2, hex: \"#A4D792\" }}/>\r\n\r\n        let GuildList = this.state.guilds.map(guild => {\r\n            return (\r\n                <Link style={{ textDecoration: \"none\" }} key={guild.id} to={`/guilds/${guild.id}`}>\r\n                    <ShortGuild guild={guild} />\r\n                </Link>\r\n            );\r\n        });\r\n\r\n        if(this.state.guilds.length < 1)\r\n            GuildList = (\r\n                <p>No Guilds! Add bot to the Guilds!</p>\r\n            )\r\n        return (\r\n            <div className=\"container\">\r\n                { GuildList }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport InfiniteLoader from 'react-window-infinite-loader';\r\n\r\nexport default class index extends Component {\r\n    constructor({ membersChunk }) {\r\n        super();\r\n\r\n        this.state = {\r\n            pageNumber: 0,\r\n            membersChunk: membersChunk,\r\n            CurrentPage: membersChunk[0],\r\n            scrollParentRef: null\r\n        };\r\n    }\r\n    render() {\r\n        console.log(this.state)\r\n\r\n        return (\r\n            <div id=\"scrollableDiv\" ref={(ref) => this.scrollParentRef = ref} style={{ marginLeft: \"200px\", height: \"800px\", overflow: \"auto\"}}>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// <InfiniteLoader\r\n//     dataLength={this.state.membersChunk.length}\r\n//     next={() => {\r\n//         let NewCurrentPage = this.state.CurrentPage;\r\n//         this.state.membersChunk[this.state.pageNumber+1].forEach((JSX_member, i) => {\r\n//             NewCurrentPage.push(JSX_member);\r\n//             if(i === this.state.membersChunk[this.state.pageNumber+1].length-1) {\r\n//                 console.log('UPDAYERR')\r\n//                 this.setState(prevState =>({\r\n//                         ...prevState,\r\n//                         pageNumber: prevState.pageNumber+=1,\r\n//                         CurrentPage: NewCurrentPage\r\n//                 }))\r\n//             }\r\n//         })\r\n//     }}\r\n//     hasMore={true}\r\n//     loader={<div className=\"loader\" key={0}>Loading...</div>}\r\n//     endMessage={\r\n//         <p style={{textAlign: 'center'}}>\r\n//             <b>Yay! You have seen it all</b>\r\n//         </p>\r\n//     }\r\n//     scrollableTarget=\"scrollableDiv\"\r\n// >\r\n//     {this.state.CurrentPage}\r\n// </InfiniteLoader>","import React, { Component } from 'react';\r\nimport './index.css';\r\nimport GetData from '../../../Functions/GetData';\r\nimport LoadingPage from '../../../LoadingPage/index';\r\n\r\nexport default class index extends Component {\r\n    constructor({ member }) {\r\n        super();\r\n\r\n        this.state = { member: member };\r\n    }\r\n\r\n    LoadData() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let ProxyUrl = `client/guilds/rbi/${this.state.member.guildID}/members/rbi/${this.state.member.userID}`;\r\n                GetData(ProxyUrl).then(async FullMember => {\r\n                    FullMember.user = await GetData(`${ProxyUrl}/user`);\r\n                    FullMember.displayHexColor = await GetData(`${ProxyUrl}/displayHexColor`);\r\n                    resolve(FullMember);\r\n                }).catch(err => ({\r\n                    ...this.state.member,\r\n                    user: {\r\n                        id: (Math.floor(Math.random() * 100000)),\r\n                        bot: false,\r\n                        tag: \"Couldn't Fetch\",\r\n                        avatarURL: \"https://image.flaticon.com/icons/svg/595/595067.svg\"\r\n                    },\r\n                    displayHexColor: \"#ffffff\"\r\n                })) \r\n            } catch (err) {\r\n                reject(err)\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: true }));\r\n        this.LoadData()\r\n        .then(data => {\r\n            this.setState(state => ({ ...state, member: data, loading: false }));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: 2, hex: \"#A4D792\" }}/>\r\n        // console.log(this.state.member)\r\n        return (\r\n            <div>\r\n                <a className=\"member-card\" style={{ color: `${this.state.member.displayHexColor}`}} key={ this.state.member.user.id }>\r\n                    <img alt = \"\" style={{ borderRadius: \"20px\" }} src={this.state.member.user.avatarURL || this.state.member.user.defaultAvatarURL} width=\"32px\" height=\"32px\"/> \r\n                    <a className=\"member-card-text\">{ this.state.member.user.tag }</a>\r\n                    {this.state.member.user.bot ? <img alt = \"\" style={{ background: \"#ff0099\", borderRadius: \"5px\", marginLeft: \"5px\" }} src=\"https://image.flaticon.com/icons/svg/531/531270.svg\" width=\"32px\" height=\"32px\"/> : ''}\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { FixedSizeList as List } from \"react-window\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport Member from '../Member/index';\r\n\r\nexport default function ExampleWrapper({\r\n  // Are there more items to load?\r\n  // (This information comes from the most recent API request.)\r\n    hasNextPage,\r\n\r\n  // Are we currently loading a page of items?\r\n  // (This may be an in-flight flag in your Redux store for example.)\r\n    isNextPageLoading,\r\n\r\n  // Array of items loaded so far.\r\n    items,\r\n\r\n  // Callback function responsible for loading the next page of items.\r\n    loadNextPage\r\n}) {\r\n    // If there are more items to be loaded then add an extra row to hold a loading indicator.\r\n    const itemCount = hasNextPage ? items.length + 1 : items.length;\r\n\r\n    // Only load 1 page of items at a time.\r\n    // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage;\r\n\r\n    // Every row is loaded except for our loading indicator row.\r\n    const isItemLoaded = index => !hasNextPage || index < items.length;\r\n\r\n    // Render an item or a loading indicator.\r\n    const Item = ({ index, style }) => {\r\n        let content;\r\n        if (!isItemLoaded(index)) {\r\n            content = \"Loading...\";\r\n        } else {\r\n            content = <Member key={items[index].userID} member={items[index]} />;\r\n        }\r\n        let CustomStyle = {\r\n            // position: \"absolute\",\r\n            left: 0,\r\n            top: style.top,\r\n            height: 50,\r\n            width: \"100%\",\r\n        }\r\n        // console.log(CustomStyle);\r\n        return <div style={CustomStyle}>{content}</div>;\r\n    };\r\n\r\nreturn (\r\n        <InfiniteLoader\r\n            isItemLoaded={isItemLoaded}\r\n            itemCount={itemCount}\r\n            loadMoreItems={loadMoreItems}\r\n        >\r\n        {({ onItemsRendered, ref }) => (\r\n            <List\r\n                className=\"List\"\r\n                height={450}\r\n                itemCount={itemCount}\r\n                itemSize={30}\r\n                onItemsRendered={onItemsRendered}\r\n                ref={ref}\r\n                width={300}\r\n            >\r\n            {Item}\r\n            </List>\r\n        )}\r\n        </InfiniteLoader>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextAreaAutoSize from 'react-textarea-autosize';\r\n\r\nexport default class FullTextChannel extends Component {\r\n    constructor({ channel }) {\r\n        super();\r\n\r\n        this.channel = channel;\r\n\r\n        this.embed = {\r\n            title: null,\r\n            description: null,\r\n            url: null,\r\n            color: \"#ffffff\",\r\n            timestamp: null,\r\n            footer: {\r\n                icon_url: null,\r\n                text: null\r\n            },\r\n            thumbnail: {\r\n                url: null\r\n            },\r\n            image: {\r\n                url: null\r\n            },\r\n            author: {\r\n                name: null,\r\n                url: null,\r\n                icon_url: null\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            isEmbed: true\r\n        }\r\n    }\r\n\r\n    componentDidCatch(err) {\r\n        console.log(err)\r\n    }\r\n\r\n    handleText(e) {\r\n        // alert('The value is: ' + this.input);\r\n        // console.log(e, this)\r\n        if(this.state.isEmbed) {\r\n            let newEmbed = {\r\n                title: null,\r\n                description: null,\r\n                url: null,\r\n                color: \"#ffffff\",\r\n                timestamp: null,\r\n                footer: {\r\n                    icon_url: null,\r\n                    text: null\r\n                },\r\n                thumbnail: {\r\n                    url: null\r\n                },\r\n                image: {\r\n                    url: null\r\n                },\r\n                author: {\r\n                    name: null,\r\n                    url: null,\r\n                    icon_url: null\r\n                }\r\n            };\r\n            // console.log(this.embed);\r\n            try {\r\n                Object.keys(this.embed).forEach((key, i) => {\r\n                    if(!this.embed[key])\r\n                        return;\r\n                    if(this.embed[key].value) { \r\n                        // console.log(`${key} has a value of ${this.embed[key].value}`)\r\n                        newEmbed[key] = this.embed[key].value;\r\n                    } else if (this.embed[key] && !this.embed[key].value ) {\r\n                        // console.log(`${key} is an object and have value of ${this.embed[key]}`)\r\n                        Object.keys(this.embed[key]).forEach((subKey, i) => {\r\n                            // console.log(this.embed[key])\r\n                            \r\n                            if(this.embed[key][subKey].value)\r\n                                newEmbed[key][subKey] = this.embed[key][subKey].value\r\n                        });\r\n                    }\r\n    \r\n                    if(i === Object.keys(this.embed).length-1) {\r\n                        console.log(newEmbed)\r\n                        axios.post(`http://localhost:5000/api/client/channel/send/${this.channel.id}`, { \r\n                            embed: newEmbed \r\n                        }) \r\n                    }\r\n                });\r\n            } catch(err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n        else\r\n            axios.post(`http://localhost:5000/api/client/channel/send/${this.channel.id}`, { \r\n                message: this.input.value\r\n            }) \r\n        e.preventDefault();\r\n    }\r\n\r\n    toggleEmbedMode(e) {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isEmbed: !prevState.isEmbed\r\n        }));\r\n\r\n        console.log('IS EMBED: ', this.state.isEmbed);\r\n    }\r\n\r\n    handleOnChange(event, ParamName, SubParam) {\r\n        event.persist();\r\n        if(!SubParam)\r\n            this.embed[ParamName] = { value: event.target.value };\r\n        else \r\n            this.embed[ParamName][SubParam] = { value: event.target.value };\r\n    }\r\n\r\n    render() {\r\n\r\n        let MessageBox;\r\n\r\n        if(this.state.isEmbed) {\r\n            MessageBox = (\r\n                <div>\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Title: </h6>\r\n                    <TextAreaAutoSize onHeightChange={(height) => { console.log(height) } } maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" placeholder=\"Title of embed\" onChange={(event) => this.handleOnChange(event, 'title')} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Description: </h6>\r\n                    <TextAreaAutoSize maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" placeholder=\"Description of embed\" onChange={(event) => this.handleOnChange(event, 'description')} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">url: </h6>\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"url of embed\" ref={(input) => this.embed.url = input} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">HEX color: </h6>\r\n                    <input className=\"channel_message_param_input\" type=\"color\" placeholder=\"#ffffff\" ref={(input) => this.embed.color = input} />\r\n\r\n                    {/* <h6>Timestamp: </h6>\r\n                    <input type=\"checkbox\" ref={(input) => this.embed.timestamp = (input ? (input.checked || input.value ? new Date().timestamp : null) : null )} /> */}\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Footer: </h6>\r\n                    <TextAreaAutoSize maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" placeholder=\"Title of embed\" onChange={(event) => this.handleOnChange(event, 'footer', \"text\")} />\r\n                    <br />\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"Footer Image URL of embed\" ref={(input) => this.embed.footer.icon_url = input} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Thumbnail: </h6>\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"Image Url for Thumbnail\" ref={(input) => this.embed.thumbnail.url = input} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Image: </h6>\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"Image Url for Image\" ref={(input) => this.embed.image.url = input} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Author: </h6>\r\n                    <input maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" placeholder=\"Author name of embed\" ref={(input) => this.embed.author.name = input} />\r\n                    <br />\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"Author url of embed\" ref={(input) => this.embed.author.url = input} />\r\n                    <br />\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"Author Image URL of embed\" ref={(input) => this.embed.author.icon_url = input} />\r\n                </div>\r\n            )\r\n        } else {\r\n            MessageBox = (\r\n                <div>\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Message: </h6>\r\n                    <input maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" ref={(input) => this.input = input} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Attachment: </h6>\r\n                    <input className=\"channel_message_param_input\" type=\"file\" ref={(input) => this.input = input} />\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div id=\"channel\" className=\"channel\" style={{ padding: \"20px\", height: \"700px\"}}>        \r\n                <form onSubmit={(e) => this.handleText(e, this)}>\r\n                    <label> \r\n                        <a onClick={this.toggleEmbedMode.bind(this)} style={{ background: \"rgb(47, 46, 73)\", padding: \"5px\" }}>EMBED MODE: {this.state.isEmbed ? \"ON\" : \"OFF\"}</a>\r\n                        <div style={{ marginTop: \"10px\" }}>\r\n                            {MessageBox}\r\n                        </div>\r\n                    </label>\r\n                    <button type=\"submit\" className=\"MenuButton SendButton\" style={{ marginRight: \"5%\" }}>\r\n                        <img className=\"MenuButtonImage\" alt=\"MESSAGE BUTTON\" src=\"https://image.flaticon.com/icons/svg/726/726580.svg\" width=\"32px\" height=\"32px\" />\r\n                    </button> \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport './index.css';\r\nimport FullTextChannel from './FullTextChannel';\r\n\r\nexport default class index extends Component {\r\n    constructor({ channel }) {\r\n        super();\r\n\r\n        this.channel = channel;\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Link className=\"channel\" to={`/guilds/${this.channel.guild}/channels/${this.channel.id}`}>\r\n                    { this.channel.name }\r\n                </Link>\r\n                <Route path={`/guilds/${this.channel.guild}/channels/${this.channel.id}`}>\r\n                    {/* { console.log(this.channel) } */}\r\n                    <FullTextChannel channel={this.channel} />\r\n                </Route>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './index.css';\r\n\r\nexport default class index extends Component {\r\n    constructor({ channel }) {\r\n        super();\r\n\r\n        this.channel = channel;\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.channel);\r\n        let joinChannel = (id) => {\r\n            axios.post(`http://localhost:5000/api/client/channel/join/${id}`, {\r\n                url: \"https://cdn.discordapp.com/attachments/384674872787206147/681914074036305949/lolicon.mp3\"\r\n            })\r\n        };\r\n\r\n        // console.log(this.channel)\r\n        let VoicePanel = async () => {\r\n            let ClientUserIdRes = await axios.get(`http://localhost:5000/api/client/user/id`);\r\n            let CGMV = await axios.get(`http://localhost:5000/api/client/guilds/rbi/${this.channel.guild}/members/rbi/${ClientUserIdRes.data}/voice`);\r\n            // console.log(ClientUserIdRes.data, CGMV.data);\r\n        };\r\n        return (\r\n            <div>\r\n                <button className=\"channel\" onClick={() => joinChannel(this.channel.id)}>\r\n                    { this.channel.name }  \r\n                    {/* { console.log(VoicePanel()) }   */}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport getData from './../../Functions/GetData';\r\nimport MemberList from './MemberList/index';\r\nimport MemberWrapper from './MemberList/MemberWrapper';\r\nimport LoadingPage from './../../LoadingPage/index';\r\nimport TextChannel from './TextChannel/index';\r\nimport VoiceChannel from './VoiceChannel/index';\r\nimport Member from './Member/index';\r\nimport './FullGuild.css';\r\n\r\nfunction timeout(callback, ms) {\r\n    return new Promise(resolve => setTimeout(async () => resolve(await callback()), ms));\r\n};\r\n\r\nexport default class FullGuild extends Component {\r\n    constructor({ guild }) {\r\n        super();\r\n\r\n        this.state = {\r\n            loading: true,\r\n            guild: guild,\r\n\r\n            hasNextPage: true,\r\n            isNextPageLoading: false,\r\n            items: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"%cMOUNTING\", \"color: red\")\r\n        new Promise(async (resolve, reject) => {\r\n            try {\r\n                let FullGuildData = await getData(`client/guilds/rbi/${this.state.guild.id}`);\r\n                FullGuildData.membersChunk = [];\r\n                FullGuildData.members = await getData(`client/guilds/rbi/${this.state.guild.id}/members/cache`);\r\n                // FullGuildData.members = await FullGuildData.members.map(m => (\r\n                //     <Member key={m.userID} member={m} />\r\n                // ));\r\n                let chunk = 50;\r\n                for(let i = 0, j = FullGuildData.members.length; i < j ; i+=chunk) {\r\n                    FullGuildData.membersChunk.push(\r\n                        FullGuildData.members.slice(i, i+chunk)\r\n                    );\r\n                    console.log(`CHUNK: ${i}/${j}`);\r\n                    if(j-i < 50) {\r\n                        console.log(`Finished CHUNK: ${i}/${j}`)\r\n                        FullGuildData.channels = await getData(`client/guilds/rbi/${this.state.guild.id}/channels/cache`);\r\n                        FullGuildData.roles = await getData(`client/guilds/rbi/${this.state.guild.id}/roles/cache`);\r\n                        resolve(FullGuildData);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                reject(err)\r\n            };\r\n        }).then(FetchedGuildData => {\r\n            this.setState(prevState => ({ \r\n                ...prevState,\r\n                guild: FetchedGuildData,\r\n                loading: false\r\n            }));\r\n        });\r\n    }\r\n\r\n    _loadNextPage = (...args) => {\r\n        console.log(\"loadNextPage\", ...args);\r\n        this.setState({ isNextPageLoading: true }, () => {\r\n            setTimeout(() => {\r\n                this.setState(state => ({\r\n                    hasNextPage: state.items.length < 100,\r\n                    isNextPageLoading: false,\r\n                    items: [...state.items].concat(\r\n                        new Array(10).fill(true).map((empty, i) => ({ ...this.state.guild.members[state.items.length+i] }))\r\n                    )\r\n                }));\r\n            }, 2500);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: \"infinite\", hex: \"yellow\" }} />\r\n\r\n        const { hasNextPage, isNextPageLoading, items } = this.state;\r\n        let ChannelList = [];\r\n        this.state.guild.channels.map((channel) => {\r\n            if(channel.type === 'category')\r\n                ChannelList.push({ category: channel, channels: [] });    \r\n            else {\r\n                for (let i = 0; i < ChannelList.length; i++) {  \r\n                    if(ChannelList[i].category.id === channel.parentID && channel.type === 'text')\r\n                        ChannelList[i].channels.push(<TextChannel channel={channel} key={channel.id} />);\r\n                    else if(ChannelList[i].category.id === channel.parentID && channel.type === 'voice')\r\n                        ChannelList[i].channels.push(<VoiceChannel channel={channel} key={channel.id} />);\r\n                }\r\n            }\r\n            return channel; \r\n        }); \r\n\r\n        let JSXChannels = ChannelList.map(data => (\r\n            <div key={Math.floor(Math.random() * 500000)} style={{ display: \"block\" }}>\r\n                <button className=\"category\" onClick={() => document.getElementById(data.category.id).style.display = document.getElementById(data.category.id).style.display === 'none' ? 'initial' : 'none'}>{data.category.name}</button>\r\n                <div id={data.category.id} className=\"category-channel-container\">\r\n                    { data.channels }\r\n                </div>\r\n            </div>\r\n        ));\r\n\r\n        // console.log(this.state);\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"Menu\">  \r\n                    <Link className=\"MenuButton\" to={`/guilds`}>\r\n                        <img className=\"MenuButtonImage\" alt=\"RETURN BUTTON\" src=\"https://image.flaticon.com/icons/svg/2223/2223675.svg\" width=\"64px\" height=\"64px\" />\r\n                    </Link>\r\n                    <Link className=\"MenuButton\" to={`/guilds/${this.state.guild.id}/channels`}>\r\n                        <img className=\"MenuButtonImage\" alt=\"CHANNELS BUTTON\" src=\"https://image.flaticon.com/icons/svg/1936/1936899.svg\" width=\"64px\" height=\"64px\" />\r\n                    </Link>\r\n                    <Link className=\"MenuButton\" to={`/guilds/${this.state.guild.id}/members`}>\r\n                        <img className=\"MenuButtonImage\" alt=\"MEMBERS BUTTON\" src=\"https://image.flaticon.com/icons/svg/2622/2622686.svg\" width=\"64px\" height=\"64px\" />\r\n                    </Link>\r\n                    <div className=\"FullGuild\">\r\n                        <p className=\"FullGuild_name\"> {this.state.guild.name} </p>\r\n                        <img alt=\"\" className=\"FullGuild_icon\" src={ this.state.guild.iconURL || 'https://cdn.discordapp.com/icons/657586144791363594/5f8627ef6dc69b914ed90c3e029a9fbc.webp?size=128' } />\r\n                        <div className=\"guild-menu-container\">\r\n                            <Switch>\r\n                                <Route path=\"/guilds/:id/channels\">\r\n                                    <div style={{ overflowY: \"scroll\", height: \"1500px\" }}>\r\n                                        { JSXChannels }\r\n                                    </div>\r\n                                </Route>\r\n                                <Route path=\"/guilds/:id/members\">\r\n                                    <h1>{ this.state.guild.name}'s Members</h1>\r\n                                    <MemberWrapper\r\n                                        hasNextPage={hasNextPage}\r\n                                        isNextPageLoading={isNextPageLoading}\r\n                                        items={items}\r\n                                        loadNextPage={this._loadNextPage}\r\n                                    />\r\n                                    {/* <MemberList membersChunk={this.state.guild.membersChunk} /> */}\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export default class FullGuild extends Component {\r\n//     constructor({ guild, from }) {\r\n//         super();\r\n\r\n//         this.from = from;\r\n//         this.state = {\r\n//             error: false,\r\n//             hasMore: true,\r\n//             loading: true, \r\n//             guild: guild\r\n//         };\r\n//     }\r\n\r\n    \r\n\r\n//     LoadData(BaseGuild) {\r\n//         if(!BaseGuild)\r\n//             BaseGuild = this.state.guild;\r\n//         console.log('Loading data', BaseGuild);\r\n//         return new Promise(async (resolve, reject) => {\r\n//             try {\r\n//                 let ProxyUrl = `client/guilds/rbi/${BaseGuild.id}`;\r\n//                 let guild = await getData(ProxyUrl);\r\n//                 guild.members = await getData(`${ProxyUrl}/members/cache`, { from: BaseGuild.members.length, maxSize: 150+BaseGuild.members.length });\r\n//                 guild.channels = await getData(`${ProxyUrl}/channels/cache`);\r\n//                 guild.roles = await getData(`${ProxyUrl}/roles/cache`);\r\n\r\n//                 console.log('Finaling data', guild);\r\n//                 resolve(guild);\r\n//             } catch (err) {\r\n//                 reject(err)\r\n//             }\r\n//         });\r\n//     }\r\n\r\n//     componentWillMount() {\r\n//         this.setState(state => ({ ...state, loading: true }));\r\n//         this.LoadData()\r\n//         .then(data => {\r\n//             console.log(data)\r\n//             this.setState(state => ({ \r\n//                 ...state, \r\n//                 guild: data,\r\n//                 loading: false,\r\n//                 hasMore: (data.memberCount > data.members.length)\r\n//             }));\r\n//         })\r\n//         .catch((err) => {\r\n//             console.log('Error Has Occured', err.message)\r\n//             this.setState({\r\n//                 error: err.message,\r\n//                 loading: false,\r\n//             });\r\n//         });\r\n//     }\r\n\r\n//     // componentWillUpdate() {\r\n//     //     console.log('UPDATE')\r\n//     //     this.setState(state => ({ ...state, loading: true }));\r\n//     //     this.LoadData()\r\n//     //     .then(data => {\r\n//     //         console.log(data)\r\n//     //         this.setState(state => ({ \r\n//     //             ...state, \r\n//     //             guild: data,\r\n//     //             loading: false,\r\n//     //             hasMore: (data.memberCount > data.members.length)\r\n//     //         }));\r\n//     //     })\r\n//     //     .catch((err) => {\r\n//     //         console.log('Error Has Occured', err.message)\r\n//     //         this.setState({\r\n//     //             error: err.message,\r\n//     //             loading: false,\r\n//     //         });\r\n//     //     });\r\n//     // }\r\n\r\n//     render() {\r\n//         if(this.state.loading)\r\n//             return <LoadingPage content=\"Loading\" state={{ i: 1, hex: \"#A4D792\" }}/>\r\n//         let MemberList = this.state.guild.members.map(member => {\r\n//             return (\r\n//                 <Member key={member.id} member={member} />\r\n//             )\r\n//         });\r\n\r\n//         return (\r\n//             <div className=\"container\">\r\n//                 <div className=\"Menu\">  \r\n//                     <Link className=\"MenuButton\" to={`/guilds`}>\r\n//                         <img className=\"MenuButtonImage\" alt=\"RETURN BUTTON\" src=\"https://image.flaticon.com/icons/svg/2223/2223675.svg\" width=\"64px\" height=\"64px\" />\r\n//                     </Link>\r\n//                     <Link className=\"MenuButton\" to={`/guilds/${this.state.guild.id}/channels`}>\r\n//                         <img className=\"MenuButtonImage\" alt=\"CHANNELS BUTTON\" src=\"https://image.flaticon.com/icons/svg/1936/1936899.svg\" width=\"64px\" height=\"64px\" />\r\n//                     </Link>\r\n//                     <Link className=\"MenuButton\" to={`/guilds/${this.state.guild.id}/members`}>\r\n//                         <img className=\"MenuButtonImage\" alt=\"MEMBERS BUTTON\" src=\"https://image.flaticon.com/icons/svg/2622/2622686.svg\" width=\"64px\" height=\"64px\" />\r\n//                     </Link>\r\n//                     <button className=\"MenuButton\" onClick={ () => { axios.post('http://localhost:5000/api/client/channel/send/677478216285421589', { message: Math.floor(Math.random() * 10023) }) } }>\r\n//                         <img className=\"MenuButtonImage\" alt=\"MESSAGE BUTTON\" src=\"https://image.flaticon.com/icons/svg/726/726580.svg\" width=\"64px\" height=\"64px\" />\r\n//                     </button>\r\n//                     <div className=\"FullGuild\">\r\n//                         <p className=\"FullGuild_name\"> {this.state.guild.name} </p>\r\n//                         <img alt=\"\" className=\"FullGuild_icon\" src={ this.state.guild.iconURL || 'https://cdn.discordapp.com/icons/657586144791363594/5f8627ef6dc69b914ed90c3e029a9fbc.webp?size=128' } />\r\n//                         <div className=\"guild-menu-container\">\r\n//                             <Switch>\r\n//                                 <Route path=\"/guilds/:id/channels\">\r\n//                                     { JSXChannels }\r\n//                                 </Route>\r\n//                                 <Route path=\"/guilds/:id/members\">\r\n//                                     <h1>{ this.state.guild.name}'s Members</h1>\r\n//                                     <div style={{ overflowY: \"scroll\", height: \"1500px\" }}>\r\n//                                         <InfiniteScroll>\r\n//                                             { MemberList }\r\n//                                         </InfiniteScroll>\r\n//                                     </div>\r\n//                                 </Route>\r\n//                             </Switch>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nexport default class index extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"NavBar\">\r\n                    <ul>\r\n                        <Link className=\"NavChild\" to=\"/\">\r\n                            <img alt='' src=\"https://image.flaticon.com/icons/svg/937/937475.svg\" width=\"64px\" height=\"64px\" />\r\n                        </Link>\r\n                        <Link className=\"NavChild\" to=\"/client\">\r\n                            <img alt='' src=\"https://image.flaticon.com/icons/svg/2593/2593177.svg\" width=\"64px\" height=\"64px\" />\r\n                        </Link>\r\n                        <Link className=\"NavChild\" to=\"/guilds\">\r\n                            <img alt='' src=\"https://image.flaticon.com/icons/svg/1665/1665754.svg\" width=\"64px\" height=\"64px\" />\r\n                        </Link>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nimport React from 'react';\r\nimport './index.css';\r\n\r\nexport default function index({ guilds }) {\r\n    return (\r\n        <div className=\"footer\">\r\n            <h3>\r\n                <span style={{ fontSize: \"1.5em\" }}>&copy;</span>\r\n                BaseBOT 2020\r\n            </h3>\r\n        </div> \r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        // Display fallback UI\r\n        this.setState({ hasError: true });\r\n        // You can also log the error to an error reporting service\r\n        console.log('ERROR')\r\n        console.log(error, info);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}  ","import React, { Component } from 'react';\r\nimport './index.css';\r\nimport GetData from '../Functions/GetData';\r\nimport LoadingPage from '../LoadingPage/index';\r\n\r\nexport default class index extends Component {\r\n    constructor({ }) {\r\n        super();\r\n\r\n        this.state = {\r\n            loading: true,\r\n            user: {}\r\n        }\r\n    }\r\n\r\n    LoadData = () => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let user = await GetData('client/user');\r\n                resolve(user)\r\n            } catch (err) {\r\n                reject(err)\r\n            };\r\n        });\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: true }));\r\n        this.LoadData()\r\n        .then(data => {\r\n            this.setState(state => ({ ...state, user: data, loading: false }));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: 1, hex: \"#A4D792\" }}/>\r\n\r\n        console.log(this.state.user)\r\n        let Page;\r\n        if(!this.state.user.tag)\r\n            Page = <a id=\"login\" href=\"https://discordapp.com/api/oauth2/authorize?client_id=676444288258801674&redirect_uri=http%3A%2F%2Flocalhost%3A5000%2Flogin%2Fcallback&response_type=code&scope=identify%20guilds%20connections%20email\">Identify Yourself</a>;\r\n        else {\r\n            Page = (\r\n                <div className=\"profile\">\r\n                    <img alt=\"YOUR AVATAR\" className=\"avatar\" src={this.state.user.avatarURL} />\r\n                    <h6 className=\"user-nick\">USER: { this.state.user.username }#{this.state.user.discriminator}</h6>\r\n                    <h1 style={{ marginTop: \"60%\" }}>HERE SOMETHING FOR USER</h1>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"main\">\r\n                { Page }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable */\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport getData from './Functions/GetData';\nimport Client from './Client/index';\nimport Guilds from './Guilds/index';\nimport FullGuild from './Guilds/Guild/FullGuild';\nimport Navigator from './Navigator/index';\nimport Footer from './Footer/index';\nimport MainPage from './MainPage/index';\nimport ErrorBoundary from './ErrorBoundary/index';\nimport User from './User/index';\nimport LoadingPage from './LoadingPage/index';\nimport Header from './Header/index';\nimport axios from 'axios';\nimport DiscordOAuth2 from 'discord-oauth2';\nimport Cookies from 'js-cookie';\nimport './App.css';\n\nfunction App() {\n  const [loading, setLoading] = useState({ v: true, jsxv: `Loading`, l: \"first\", state: { i: -1, hex: \"#A4D792\" }});\n  const [MemberListLoading, setMemberListLoading] = useState(true)\n  const [guilds, setGuilds] = useState([]);\n  const [MemberPage, setMemberPage] = useState(0);\n  const observer = useRef()\n  const LastMemberElementRef = useCallback(node => {\n   // if(node == null) return console.log(`НОДЕЕЕЕЕ ТУТ: ${node}`)\n    // setTimeout(() => {\n        if(MemberListLoading)\n          return;\n        if(observer.current)\n          observer.current.disconnect();\n        observer.current = new IntersectionObserver(entries => {\n          if(entries[0].isIntersecting) {\n            console.log(`VISIBLE`);\n            setMemberPage(p => p+10);\n          }\n        });\n        console.log(node, MemberPage)\n        if(node) \n          observer.current.observe(node)\n    // }, 1000)\n  }, [MemberListLoading]);\n\n  const ShowGuild = (props, guilds) => {\n    const { match } = props;\n    let { id } = match.params;\n    let BaseGuild = guilds.filter(g => g.id === id)[0];\n    if(BaseGuild) {\n      BaseGuild.members = BaseGuild.members.slice(0, 50);\n      return (<FullGuild guild={BaseGuild} from={MemberPage} />)\n    }\n    else\n      return (<Guilds  />);\n  };\n\n  useEffect(() => {\n    setLoading({ v: true, jsxv: `Maintance`, l: \"loading\", state: { i: 2, hex: \"#bd8700\" } });\n    new Promise(async (resolve, reject) => {\n      try {\n        let guilds = await getData('client/guilds/cache');\n        setGuilds(guilds);\n        setLoading({ v: false, jsxv: `Maintance`, l: \"loading\", state: { i: 2, hex: \"#bd8700\" } });\n      } catch (err) {\n        console.log(err)\n        reject({ v: true, jsxv: `ERROR ${err.stack}`, l: \"error\", state: { i: 2, hex: \"#D10000\" }});\n      }\n    })\n    .then(setLoading)\n    .catch(setLoading);\n  }, []);\n\n  if(loading.v) \n    return (<LoadingPage content={ loading.jsxv } state={ loading.state } />);\n\n  return (\n    <Router>\n      <ErrorBoundary>\n        {/* <Header /> */}\n        <Navigator />\n        <br/>\n        <Switch>\n          <Route path=\"/client\">\n            <Client getData={getData} LoadingPage={LoadingPage} />\n          </Route>\n          <Route path=\"/guilds/:id\" component={(props) => ShowGuild(props, guilds)}>\n          </Route>\n          <Route path=\"/guilds\">\n            <Guilds />\n          </Route>\n          <Route path=\"/user\">\n            <User />\n          </Route>\n          <Route>\n            <User />\n            {/* <MainPage /> */}\n          </Route>\n        </Switch>\n        <br/>\n        <Footer />\n      </ErrorBoundary>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}