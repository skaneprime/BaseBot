{"version":3,"sources":["Functions/GetData.js","LoadingPage/index.js","Client/command/index.js","Client/index.js","Guilds/Guild/ShortGuild.js","Guilds/index.js","Guilds/Guild/Member/index.js","Guilds/Guild/MemberList/MemberWrapper.js","Guilds/Guild/TextChannel/FullTextChannel.js","Guilds/Guild/TextChannel/index.js","Guilds/Guild/VoiceChannel/index.js","Guilds/Guild/FullGuild.js","Navigator/index.js","Footer/index.js","MainPage/index.js","ErrorBoundary/index.js","User/index.js","Header/index.js","Docs/index.js","App.js","index.js"],"names":["link","options","a","from","Promise","resolve","reject","axios","get","then","data","Array","isArray","length","maxSize","slice","catch","err","index","LoadingBar","content","state","i","className","style","animation","background","hex","id","width","position","top","left","color","String","includes","command","ActivatedCSSClassName","loading","this","setState","name","onClick","SaveCommand","fontSize","description","usage","Component","client","SelectedCommand","getData","user","commands","LoadData","class","username","filter","c","invincible","map","key","ToggleCommand","guild","console","log","alt","src","iconURL","guilds","GuildList","textDecoration","to","href","member","ProxyUrl","guildID","userID","GetData","FullMember","displayHexColor","Math","floor","random","bot","tag","avatarURL","borderRadius","defaultAvatarURL","height","marginLeft","ExampleWrapper","hasNextPage","isNextPageLoading","items","loadNextPage","itemCount","loadMoreItems","isItemLoaded","Item","CustomStyle","onItemsRendered","ref","itemSize","FullTextChannel","channel","messageData","embed","title","url","timestamp","footer","icon_url","text","thumbnail","image","author","isEmbed","e","newEmbed","Object","keys","forEach","value","subKey","post","message","attachment","preventDefault","prevState","event","ParamName","SubParam","persist","target","MessageBox","onHeightChange","maxLength","type","placeholder","onChange","handleOnChange","input","padding","onSubmit","handleText","toggleEmbedMode","bind","marginTop","marginRight","path","border","joinChannel","FullGuild","_loadNextPage","args","setTimeout","concat","fill","empty","members","FullGuildData","membersChunk","chunk","j","push","channels","roles","FetchedGuildData","ChannelList","category","parentID","JSXChannels","display","document","getElementById","overflowY","ErrorBoundary","props","hasError","error","info","children","React","AuthoredUser","u","Page","isBarOpen","bar","Cookies","set","window","location","reload","toggleBar","CSSGray","CSSRed","CSSBlue","CSSYellow","CSSPurple","comment","str","bool","array","fontWeight","borderLeftColor","App","useState","v","jsxv","l","setLoading","MemberListLoading","setGuilds","MemberPage","setMemberPage","setAuthoredUser","observer","useRef","oauth","DiscordOAuth2","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","p","observe","useEffect","getUser","stack","LoadingPage","component","match","params","BaseGuild","g","ShowGuild","ReactDOM","render"],"mappings":"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","file":"static/js/main.953764d8.chunk.js","sourcesContent":["import axios from 'axios';\r\nexport default (async function getData(link, options) {\r\n    let proxyUrl = `http://localhost:5000/api/`;\r\n    if(!options)\r\n        options = { from: 0 };\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            axios.get(`${proxyUrl}${link}`)\r\n            .then(({ data }) => {\r\n                if(Array.isArray(data) && data.length > (options.maxSize ? options.maxSize+options.from : data.length))\r\n                    data = data.slice(options.from, options.maxSize+options.from)\r\n                resolve(data);\r\n            })\r\n            .catch(err => reject(err));\r\n        } catch (err) {\r\n            reject(err);\r\n        }\r\n    });\r\n})","import React from 'react';\r\nimport './index.css';\r\n\r\nexport default function index({ content, state}) {\r\n    let LoadingBar;\r\n    if(state.i === 'infinite') {\r\n        LoadingBar = <div className=\"loading-bar\" style={{ animation: \"move 2s linear infinite\", background: state.hex }} id=\"loading-bar\" />\r\n    }\r\n    else {\r\n        LoadingBar = <div className=\"loading-bar\" id=\"loading-bar\" style={{ width: state.i * 200, background: state.hex }} />\r\n    }\r\n    return (\r\n        <>\r\n        <div style={{ position: \"absolute\", top: \"50%\", left: \"40%\"}}>\r\n            <div className=\"bar\">\r\n                { LoadingBar }\r\n            </div>\r\n            <h1 className=\"text\" style={{ color: String(content).includes('Error') ? \"#808080\" : \"#818199\" }}>{ String(content).includes('Error') ? 'Error has occurred' : content }</h1>\r\n        </div>\r\n        </>\r\n    )\r\n}","import LoadingPage from '../../LoadingPage/index';\r\nimport React, { Component } from 'react'\r\nimport './index.css';\r\n\r\nexport default class command extends Component {\r\n    constructor({ command }) {\r\n        super();\r\n        \r\n        this.state = {\r\n            command: command,\r\n            ActivatedCSSClassName: 'active',\r\n            loading: true\r\n        };\r\n    }\r\n\r\n    LoadData() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                resolve();\r\n            } catch (err) {\r\n                reject(err)\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: false }));\r\n    }\r\n\r\n    SaveCommand(command) {\r\n        this.setState(command)\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: 2, hex: \"#A4D792\" }}/>\r\n\r\n        return (\r\n            <div className={ this.ActivatedCSSClassName }>\r\n                SELECTED { this.state.command.name } \r\n                <button className=\"button\" onClick={() => this.SaveCommand(this.state.command) }>Save</button>\r\n                <br/>\r\n\r\n                Description:\r\n                <br/> \r\n                <p style={{ fontSize: \"15px\", color: \"white\"}}>{ this.state.command.description }</p>\r\n                <br />\r\n                Usage:\r\n                <br/> \r\n                <p style={{ fontSize: \"15px\", color: \"white\"}}>{ this.state.command.usage }</p>\r\n                <br />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport getData from './../Functions/GetData';\r\nimport LoadingPage from '../LoadingPage/index';\r\nimport Command from './command/index';\r\nimport './index.css';\r\n\r\nexport default class index extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            loading: true,\r\n            client: {}, \r\n            SelectedCommand: null, \r\n            ActivatedCSSClassName: 'active' \r\n        };\r\n\r\n    }\r\n    \r\n    ToggleCommand(command) {\r\n        this.setState(state => ({ \r\n            ...state,\r\n            SelectedCommand: command.name, \r\n        }));\r\n    }\r\n\r\n    LoadData() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let client = await getData('client');\r\n                client.user = await getData('client/user');\r\n                client.commands = await getData('client/commands');\r\n                resolve(client);\r\n            } catch (err) {\r\n                reject(err)\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: true }));\r\n        this.LoadData()\r\n        .then(data => {\r\n            this.setState(state => ({ ...state, client: data, loading: false }));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: 2, hex: \"#A4D792\" }}/>\r\n\r\n        return (\r\n            <>\r\n            <div className=\"client\">\r\n                <div class=\"title-container\"><h1>{ this.state.client.user.username }'s Commands</h1></div>\r\n\r\n                <div className=\"command-container\">\r\n                { this.state.client.commands.filter(c => !c.invincible).map(command => (\r\n                    <div className=\"command\" key={command.name} onClick={() => this.ToggleCommand(command)}>\r\n                        { this.state.SelectedCommand !== command.name ? <p className=\"command_name\">{ command.name }</p> : <Command command={command} /> }\r\n                    </div> \r\n                ))}\r\n                </div>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// export default function index({ this.state.client, SelectedCommandName, setSelectedCommandName }) {\r\n\r\n//     const ToggleCommand = (command) => {\r\n//         setSelectedCommandName(SelectedCommandName === command.name ? SelectedCommandName : command.name);\r\n//     };\r\n//     return (\r\n//         <div className=\"this.state.client\">\r\n//             { this.state.client.user.tag }\r\n\r\n//             { this.state.client.commands.map(command => (\r\n//                 <div className=\"command\" onClick={() => ToggleCommand(command)}>\r\n//                     { SelectedCommandName !== command.name ? command.name : <Command command={command}/> }\r\n//                 </div> \r\n//             ))}\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n","import React, { Component } from 'react';\r\nimport './ShortGuild.css';\r\n\r\nexport default class index extends Component {\r\n    constructor({ guild }) {\r\n        super();\r\n\r\n        this.state = {};\r\n\r\n        this.guild = guild;\r\n    }\r\n\r\n    openGuild() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ShortGuild\" onClick={() => console.log('CLICKED') }>\r\n                <img alt=\"\" className=\"ShortGuild_icon\" src={ this.guild.iconURL || 'https://cdn.discordapp.com/icons/657586144791363594/5f8627ef6dc69b914ed90c3e029a9fbc.webp?size=128' }></img>\r\n                <p className=\"ShortGuild_name\"> {this.guild.name} </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport getData from './../Functions/GetData';\r\nimport LoadingPage from '../LoadingPage/index';\r\nimport ShortGuild from './Guild/ShortGuild.js';\r\nimport './index.css';\r\n\r\nexport default class index extends Component {\r\n    constructor() {\r\n        super();\r\n        \r\n        this.state = { \r\n            guilds: [],\r\n            loading: true\r\n        };\r\n    }\r\n\r\n    LoadData() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let guilds = await getData('client/guilds/cache');\r\n                resolve(guilds);\r\n            } catch (err) {\r\n                reject(err)\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: true }));\r\n        this.LoadData()\r\n        .then(data => {\r\n            this.setState(state => ({ ...state, guilds: data, loading: false }));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: 2, hex: \"#A4D792\" }}/>\r\n\r\n        let GuildList = this.state.guilds.map(guild => {\r\n            return (\r\n                <Link style={{ textDecoration: \"none\" }} key={guild.id} to={`/guilds/${guild.id}`}>\r\n                    <ShortGuild guild={guild} />\r\n                </Link>\r\n            );\r\n        });\r\n\r\n        if(this.state.guilds.length < 1)\r\n            GuildList = (\r\n                <a style={{ color: \"#fff\", textDecoration: \"none\" }} href=\"https://discordapp.com/api/oauth2/authorize?client_id=679279721145565195&permissions=8&scope=bot\">Add Bot You Server!</a>\r\n            )\r\n        return (\r\n            <div className=\"container\">\r\n                { GuildList }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport './index.css';\r\nimport GetData from '../../../Functions/GetData';\r\nimport LoadingPage from '../../../LoadingPage/index';\r\n\r\nexport default class index extends Component {\r\n    constructor({ member }) {\r\n        super();\r\n\r\n        this.state = { member: member };\r\n    }\r\n\r\n    LoadData() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let ProxyUrl = `client/guilds/rbi/${this.state.member.guildID}/members/rbi/${this.state.member.userID}`;\r\n                GetData(ProxyUrl).then(async FullMember => {\r\n                    FullMember.user = await GetData(`${ProxyUrl}/user`);\r\n                    FullMember.displayHexColor = await GetData(`${ProxyUrl}/displayHexColor`);\r\n                    resolve(FullMember);\r\n                }).catch(err => ({\r\n                    ...this.state.member,\r\n                    user: {\r\n                        id: (Math.floor(Math.random() * 100000)),\r\n                        bot: false,\r\n                        tag: \"Couldn't Fetch\",\r\n                        avatarURL: \"https://image.flaticon.com/icons/svg/595/595067.svg\"\r\n                    },\r\n                    displayHexColor: \"#ffffff\"\r\n                })) \r\n            } catch (err) {\r\n                reject(err)\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: true }));\r\n        this.LoadData()\r\n        .then(data => {\r\n            this.setState(state => ({ ...state, member: data, loading: false }));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: 2, hex: \"#A4D792\" }}/>\r\n        // console.log(this.state.member)\r\n        return (\r\n            <div>\r\n                <p className=\"member-card\" style={{ color: `${this.state.member.displayHexColor}`}} key={ this.state.member.user.id }>\r\n                    <img alt = \"\" style={{ borderRadius: \"20px\" }} src={this.state.member.user.avatarURL || this.state.member.user.defaultAvatarURL} width=\"32px\" height=\"32px\"/> \r\n                    <p className=\"member-card-text\">{ this.state.member.user.tag }</p>\r\n                    {this.state.member.user.bot ? <img alt = \"\" style={{ background: \"#ff0099\", borderRadius: \"5px\", marginLeft: \"5px\" }} src=\"https://image.flaticon.com/icons/svg/531/531270.svg\" width=\"32px\" height=\"32px\"/> : ''}\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { FixedSizeList as List } from \"react-window\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport Member from '../Member/index';\r\n\r\nexport default function ExampleWrapper({\r\n  // Are there more items to load?\r\n  // (This information comes from the most recent API request.)\r\n    hasNextPage,\r\n\r\n  // Are we currently loading a page of items?\r\n  // (This may be an in-flight flag in your Redux store for example.)\r\n    isNextPageLoading,\r\n\r\n  // Array of items loaded so far.\r\n    items,\r\n\r\n  // Callback function responsible for loading the next page of items.\r\n    loadNextPage\r\n}) {\r\n    // If there are more items to be loaded then add an extra row to hold a loading indicator.\r\n    const itemCount = hasNextPage ? items.length + 1 : items.length;\r\n\r\n    // Only load 1 page of items at a time.\r\n    // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage;\r\n\r\n    // Every row is loaded except for our loading indicator row.\r\n    const isItemLoaded = index => !hasNextPage || index < items.length;\r\n\r\n    // Render an item or a loading indicator.\r\n    const Item = ({ index, style }) => {\r\n        let content;\r\n        if (!isItemLoaded(index)) {\r\n            content = \"Loading...\";\r\n        } else {\r\n            content = <Member key={items[index].userID} member={items[index]} />;\r\n        }\r\n        let CustomStyle = {\r\n            // position: \"absolute\",\r\n            left: 0,\r\n            top: style.top,\r\n            height: 50,\r\n            width: \"100%\",\r\n        }\r\n        // console.log(CustomStyle);\r\n        return <div style={CustomStyle}>{content}</div>;\r\n    };\r\n\r\nreturn (\r\n        <InfiniteLoader\r\n            isItemLoaded={isItemLoaded}\r\n            itemCount={itemCount}\r\n            loadMoreItems={loadMoreItems}\r\n        >\r\n        {({ onItemsRendered, ref }) => (\r\n            <List\r\n                className=\"List\"\r\n                height={450}\r\n                itemCount={itemCount}\r\n                itemSize={30}\r\n                onItemsRendered={onItemsRendered}\r\n                ref={ref}\r\n                width={300}\r\n            >\r\n            {Item}\r\n            </List>\r\n        )}\r\n        </InfiniteLoader>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TextAreaAutoSize from 'react-textarea-autosize';\r\n\r\nexport default class FullTextChannel extends Component {\r\n    constructor({ channel }) {\r\n        super();\r\n\r\n        this.channel = channel;\r\n        \r\n        this.messageData = {};\r\n\r\n        this.embed = {\r\n            title: null,\r\n            description: null,\r\n            url: null,\r\n            color: \"#ffffff\",\r\n            timestamp: null,\r\n            footer: {\r\n                icon_url: null,\r\n                text: null\r\n            },\r\n            thumbnail: {\r\n                url: null\r\n            },\r\n            image: {\r\n                url: null\r\n            },\r\n            author: {\r\n                name: null,\r\n                url: null,\r\n                icon_url: null\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            isEmbed: true\r\n        }\r\n    }\r\n\r\n    componentDidCatch(err) {\r\n        console.log(err)\r\n    }\r\n\r\n    handleText(e) {\r\n        // alert('The value is: ' + this.input);\r\n        // console.log(e, this)\r\n        if(this.state.isEmbed) {\r\n            let newEmbed = {\r\n                title: null,\r\n                description: null,\r\n                url: null,\r\n                color: \"#ffffff\",\r\n                timestamp: null,\r\n                footer: {\r\n                    icon_url: null,\r\n                    text: null\r\n                },\r\n                thumbnail: {\r\n                    url: null\r\n                },\r\n                image: {\r\n                    url: null\r\n                },\r\n                author: {\r\n                    name: null,\r\n                    url: null,\r\n                    icon_url: null\r\n                }\r\n            };\r\n            // console.log(this.embed);\r\n            try {\r\n                Object.keys(this.embed).forEach((key, i) => {\r\n                    if(!this.embed[key])\r\n                        return;\r\n                    if(this.embed[key].value) { \r\n                        // console.log(`${key} has a value of ${this.embed[key].value}`)\r\n                        newEmbed[key] = this.embed[key].value;\r\n                    } else if (this.embed[key] && !this.embed[key].value ) {\r\n                        // console.log(`${key} is an object and have value of ${this.embed[key]}`)\r\n                        Object.keys(this.embed[key]).forEach((subKey, i) => {\r\n                            // console.log(this.embed[key])\r\n                            \r\n                            if(this.embed[key][subKey] && this.embed[key][subKey].value)\r\n                                newEmbed[key][subKey] = this.embed[key][subKey].value\r\n                        });\r\n                    }\r\n    \r\n                    if(i === Object.keys(this.embed).length-1) {\r\n                        console.log(newEmbed)\r\n                        axios.post(`http://localhost:5000/api/client/channel/send/${this.channel.id}`, { \r\n                            embed: newEmbed \r\n                        }) \r\n                    }\r\n                });\r\n            } catch(err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n        else\r\n            axios.post(`http://localhost:5000/api/client/channel/send/${this.channel.id}`, { \r\n                message: this.messageData.message.value,\r\n                attachment: this.messageData.attachment.value\r\n            }) \r\n        e.preventDefault();\r\n    }\r\n\r\n    toggleEmbedMode(e) {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isEmbed: !prevState.isEmbed\r\n        }));\r\n\r\n        console.log('IS EMBED: ', this.state.isEmbed);\r\n    }\r\n\r\n    handleOnChange(event, ParamName, SubParam) {\r\n        event.persist();\r\n        if(!SubParam)\r\n            this.embed[ParamName] = { value: event.target.value };\r\n        else \r\n            this.embed[ParamName][SubParam] = { value: event.target.value };\r\n    }\r\n\r\n    render() {\r\n\r\n        let MessageBox;\r\n\r\n        if(this.state.isEmbed) {\r\n            MessageBox = (\r\n                <div>\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Message Content: </h6>\r\n                    <TextAreaAutoSize onHeightChange={(height) => { console.log(height) } } maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" placeholder=\"Message Content\" onChange={(event) => this.handleOnChange(event, 'message')} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Title: </h6>\r\n                    <TextAreaAutoSize onHeightChange={(height) => { console.log(height) } } maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" placeholder=\"Title of embed\" onChange={(event) => this.handleOnChange(event, 'title')} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Description: </h6>\r\n                    <TextAreaAutoSize maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" placeholder=\"Description of embed\" onChange={(event) => this.handleOnChange(event, 'description')} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">url: </h6>\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"url of embed\" ref={(input) => this.embed.url = input} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">HEX color: </h6>\r\n                    <input className=\"channel_message_param_input\" type=\"color\" placeholder=\"#ffffff\" ref={(input) => this.embed.color = input} />\r\n\r\n                    {/* <h6>Timestamp: </h6>\r\n                    <input type=\"checkbox\" ref={(input) => this.embed.timestamp = (input ? (input.checked || input.value ? new Date().timestamp : null) : null )} /> */}\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Footer: </h6>\r\n                    <TextAreaAutoSize maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" placeholder=\"Title of embed\" onChange={(event) => this.handleOnChange(event, 'footer', \"text\")} />\r\n                    <br />\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"Footer Image URL of embed\" ref={(input) => this.embed.footer.icon_url = input} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Thumbnail: </h6>\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"Image Url for Thumbnail\" ref={(input) => this.embed.thumbnail.url = input} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Image: </h6>\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"Image Url for Image\" ref={(input) => this.embed.image.url = input} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Author: </h6>\r\n                    <input maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" placeholder=\"Author name of embed\" ref={(input) => this.embed.author.name = input} />\r\n                    <br />\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"Author url of embed\" ref={(input) => this.embed.author.url = input} />\r\n                    <br />\r\n                    <input className=\"channel_message_param_input\" type=\"text\" placeholder=\"Author Image URL of embed\" ref={(input) => this.embed.author.icon_url = input} />\r\n                </div>\r\n            )\r\n        } else {\r\n            MessageBox = (\r\n                <div>\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Message: </h6>\r\n                    <input maxLength=\"256\" className=\"channel_message_param_input\" type=\"text\" ref={(input) => this.messageData.message = input} />\r\n                    <hr />\r\n                    <h6 className=\"channel_message_param\">Attachment: </h6>\r\n                    <input className=\"channel_message_param_input\" type=\"file\" ref={(input) => this.messageData.attachment = input} />\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div id=\"channel\" className=\"channel\" style={{ padding: \"20px\", height: \"700px\"}}>        \r\n                <form onSubmit={(e) => this.handleText(e, this)}>\r\n                    <label> \r\n                        <p onClick={this.toggleEmbedMode.bind(this)} style={{ background: \"rgb(47, 46, 73)\", padding: \"5px\" }}>EMBED MODE: {this.state.isEmbed ? \"ON\" : \"OFF\"}</p>\r\n                        <div style={{ marginTop: \"10px\" }}>\r\n                            {MessageBox}\r\n                        </div>\r\n                    </label>\r\n                    <button type=\"submit\" className=\"MenuButton SendButton\" style={{ marginRight: \"5%\" }}>\r\n                        <img className=\"MenuButtonImage\" alt=\"MESSAGE BUTTON\" src=\"https://image.flaticon.com/icons/svg/726/726580.svg\" width=\"32px\" height=\"32px\" />\r\n                    </button> \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n// import axios from 'axios';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport './index.css';\r\nimport FullTextChannel from './FullTextChannel';\r\n\r\nexport default class index extends Component {\r\n    constructor({ channel }) {\r\n        super();\r\n\r\n        this.channel = channel;\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Link className=\"channel\" to={`/guilds/${this.channel.guild}/channels/${this.channel.id}`}>\r\n                    { this.channel.name }\r\n                </Link>\r\n                <Route path={`/guilds/${this.channel.guild}/channels/${this.channel.id}`}>\r\n                    {/* { console.log(this.channel) } */}\r\n                    <FullTextChannel channel={this.channel} />\r\n                </Route>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './index.css';\r\n\r\nexport default class index extends Component {\r\n    constructor({ channel }) {\r\n        super();\r\n\r\n        this.channel = channel;\r\n\r\n        this.url = null;\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.channel);\r\n        let joinChannel = (id, e) => {\r\n            axios.post(`http://localhost:5000/api/client/channel/join/${id}`, {\r\n                url: this.url.value\r\n            });\r\n            e.preventDefault();\r\n        };\r\n\r\n        // console.log(this.channel)\r\n        // let VoicePanel = async () => {\r\n            // let ClientUserIdRes = await axios.get(`http://localhost:5000/api/client/user/id`);\r\n            // let CGMV = await axios.get(`http://localhost:5000/api/client/guilds/rbi/${this.channel.guild}/members/rbi/${ClientUserIdRes.data}/voice`);\r\n            // console.log(ClientUserIdRes.data, CGMV.data);\r\n        // };\r\n        return (\r\n            <div>\r\n                <form style={{ background: \"#2e364d\", padding: \"5px\", marginTop: \"15px\" }}>\r\n\r\n                <button type=\"submit\" style={{ border: \"none\" }} className=\"channel\" onClick={(e) => joinChannel(this.channel.id, e)}>\r\n                    { this.channel.name }  \r\n                    {/* { console.log(VoicePanel()) }   */}\r\n                </button>\r\n                <input type=\"text\" className=\"channel_message_param_input\" placeholder=\"Link to Youtube video or audio\" ref={ (input) => {\r\n                    return this.url = input\r\n                }} />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\nimport getData from './../../Functions/GetData';\r\n// import MemberList from './MemberList/index';\r\nimport MemberWrapper from './MemberList/MemberWrapper';\r\nimport LoadingPage from './../../LoadingPage/index';\r\nimport TextChannel from './TextChannel/index';\r\nimport VoiceChannel from './VoiceChannel/index';\r\n// import Member from './Member/index';\r\nimport './FullGuild.css';\r\n\r\n// function timeout(callback, ms) {\r\n//     return new Promise(resolve => setTimeout(async () => resolve(await callback()), ms));\r\n// };\r\n\r\nexport default class FullGuild extends Component {\r\n    constructor({ guild }) {\r\n        super();\r\n\r\n        this.state = {\r\n            loading: true,\r\n            guild: guild,\r\n\r\n            hasNextPage: true,\r\n            isNextPageLoading: false,\r\n            items: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"%cMOUNTING\", \"color: red\")\r\n        new Promise(async (resolve, reject) => {\r\n            try {\r\n                let FullGuildData = await getData(`client/guilds/rbi/${this.state.guild.id}`);\r\n                FullGuildData.membersChunk = [];\r\n                FullGuildData.members = await getData(`client/guilds/rbi/${this.state.guild.id}/members/cache`);\r\n                // FullGuildData.members = await FullGuildData.members.map(m => (\r\n                //     <Member key={m.userID} member={m} />\r\n                // ));\r\n                let chunk = 50;\r\n                for(let i = 0, j = FullGuildData.members.length; i < j ; i+=chunk) {\r\n                    FullGuildData.membersChunk.push(\r\n                        FullGuildData.members.slice(i, i+chunk)\r\n                    );\r\n                    console.log(`CHUNK: ${i}/${j}`);\r\n                    if(j-i < 50) {\r\n                        console.log(`Finished CHUNK: ${i}/${j}`)\r\n                        FullGuildData.channels = await getData(`client/guilds/rbi/${this.state.guild.id}/channels/cache`);\r\n                        FullGuildData.roles = await getData(`client/guilds/rbi/${this.state.guild.id}/roles/cache`);\r\n                        resolve(FullGuildData);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                reject(err)\r\n            };\r\n        }).then(FetchedGuildData => {\r\n            this.setState(prevState => ({ \r\n                ...prevState,\r\n                guild: FetchedGuildData,\r\n                loading: false\r\n            }));\r\n        });\r\n    }\r\n\r\n    _loadNextPage = (...args) => {\r\n        console.log(\"loadNextPage\", ...args);\r\n        this.setState({ isNextPageLoading: true }, () => {\r\n            setTimeout(() => {\r\n                this.setState(state => ({\r\n                    hasNextPage: state.items.length < 100,\r\n                    isNextPageLoading: false,\r\n                    items: [...state.items].concat(\r\n                        new Array(10).fill(true).map((empty, i) => ({ ...this.state.guild.members[state.items.length+i] }))\r\n                    )\r\n                }));\r\n            }, 2500);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: \"infinite\", hex: \"yellow\" }} />\r\n\r\n        const { hasNextPage, isNextPageLoading, items } = this.state;\r\n        let ChannelList = [];\r\n        this.state.guild.channels.map((channel) => {\r\n            if(channel.type === 'category')\r\n                ChannelList.push({ category: channel, channels: [] });    \r\n            else {\r\n                for (let i = 0; i < ChannelList.length; i++) {  \r\n                    if(ChannelList[i].category.id === channel.parentID && channel.type === 'text')\r\n                        ChannelList[i].channels.push(<TextChannel channel={channel} key={channel.id} />);\r\n                    else if(ChannelList[i].category.id === channel.parentID && channel.type === 'voice')\r\n                        ChannelList[i].channels.push(<VoiceChannel channel={channel} key={channel.id} />);\r\n                }\r\n            }\r\n            return channel; \r\n        }); \r\n\r\n        let JSXChannels = ChannelList.map(data => (\r\n            <div key={Math.floor(Math.random() * 500000)} style={{ display: \"block\" }}>\r\n                <button className=\"category\" onClick={() => document.getElementById(data.category.id).style.display = document.getElementById(data.category.id).style.display === 'none' ? 'initial' : 'none'}>{data.category.name}</button>\r\n                <div id={data.category.id} className=\"category-channel-container\">\r\n                    { data.channels }\r\n                </div>\r\n            </div>\r\n        ));\r\n\r\n        // console.log(this.state);\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"Menu\">  \r\n                    <Link className=\"MenuButton\" to={`/guilds`}>\r\n                        <img className=\"MenuButtonImage\" alt=\"RETURN BUTTON\" src=\"https://image.flaticon.com/icons/svg/2223/2223675.svg\" width=\"64px\" height=\"64px\" />\r\n                    </Link>\r\n                    <Link className=\"MenuButton\" to={`/guilds/${this.state.guild.id}/channels`}>\r\n                        <img className=\"MenuButtonImage\" alt=\"CHANNELS BUTTON\" src=\"https://image.flaticon.com/icons/svg/1936/1936899.svg\" width=\"64px\" height=\"64px\" />\r\n                    </Link>\r\n                    <Link className=\"MenuButton\" to={`/guilds/${this.state.guild.id}/members`}>\r\n                        <img className=\"MenuButtonImage\" alt=\"MEMBERS BUTTON\" src=\"https://image.flaticon.com/icons/svg/2622/2622686.svg\" width=\"64px\" height=\"64px\" />\r\n                    </Link>\r\n                    <div className=\"FullGuild\">\r\n                        <p className=\"FullGuild_name\"> {this.state.guild.name} </p>\r\n                        <img alt=\"\" className=\"FullGuild_icon\" src={ this.state.guild.iconURL || 'https://cdn.discordapp.com/icons/657586144791363594/5f8627ef6dc69b914ed90c3e029a9fbc.webp?size=128' } />\r\n                        <div className=\"guild-menu-container\">\r\n                            <Switch>\r\n                                <Route path=\"/guilds/:id/channels\">\r\n                                    <div style={{ overflowY: \"scroll\", height: \"1500px\" }}>\r\n                                        { JSXChannels }\r\n                                    </div>\r\n                                </Route>\r\n                                <Route path=\"/guilds/:id/members\">\r\n                                    <h1>{ this.state.guild.name}'s Members</h1>\r\n                                    <MemberWrapper\r\n                                        hasNextPage={hasNextPage}\r\n                                        isNextPageLoading={isNextPageLoading}\r\n                                        items={items}\r\n                                        loadNextPage={this._loadNextPage}\r\n                                    />\r\n                                    {/* <MemberList membersChunk={this.state.guild.membersChunk} /> */}\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export default class FullGuild extends Component {\r\n//     constructor({ guild, from }) {\r\n//         super();\r\n\r\n//         this.from = from;\r\n//         this.state = {\r\n//             error: false,\r\n//             hasMore: true,\r\n//             loading: true, \r\n//             guild: guild\r\n//         };\r\n//     }\r\n\r\n    \r\n\r\n//     LoadData(BaseGuild) {\r\n//         if(!BaseGuild)\r\n//             BaseGuild = this.state.guild;\r\n//         console.log('Loading data', BaseGuild);\r\n//         return new Promise(async (resolve, reject) => {\r\n//             try {\r\n//                 let ProxyUrl = `client/guilds/rbi/${BaseGuild.id}`;\r\n//                 let guild = await getData(ProxyUrl);\r\n//                 guild.members = await getData(`${ProxyUrl}/members/cache`, { from: BaseGuild.members.length, maxSize: 150+BaseGuild.members.length });\r\n//                 guild.channels = await getData(`${ProxyUrl}/channels/cache`);\r\n//                 guild.roles = await getData(`${ProxyUrl}/roles/cache`);\r\n\r\n//                 console.log('Finaling data', guild);\r\n//                 resolve(guild);\r\n//             } catch (err) {\r\n//                 reject(err)\r\n//             }\r\n//         });\r\n//     }\r\n\r\n//     componentWillMount() {\r\n//         this.setState(state => ({ ...state, loading: true }));\r\n//         this.LoadData()\r\n//         .then(data => {\r\n//             console.log(data)\r\n//             this.setState(state => ({ \r\n//                 ...state, \r\n//                 guild: data,\r\n//                 loading: false,\r\n//                 hasMore: (data.memberCount > data.members.length)\r\n//             }));\r\n//         })\r\n//         .catch((err) => {\r\n//             console.log('Error Has Occured', err.message)\r\n//             this.setState({\r\n//                 error: err.message,\r\n//                 loading: false,\r\n//             });\r\n//         });\r\n//     }\r\n\r\n//     // componentWillUpdate() {\r\n//     //     console.log('UPDATE')\r\n//     //     this.setState(state => ({ ...state, loading: true }));\r\n//     //     this.LoadData()\r\n//     //     .then(data => {\r\n//     //         console.log(data)\r\n//     //         this.setState(state => ({ \r\n//     //             ...state, \r\n//     //             guild: data,\r\n//     //             loading: false,\r\n//     //             hasMore: (data.memberCount > data.members.length)\r\n//     //         }));\r\n//     //     })\r\n//     //     .catch((err) => {\r\n//     //         console.log('Error Has Occured', err.message)\r\n//     //         this.setState({\r\n//     //             error: err.message,\r\n//     //             loading: false,\r\n//     //         });\r\n//     //     });\r\n//     // }\r\n\r\n//     render() {\r\n//         if(this.state.loading)\r\n//             return <LoadingPage content=\"Loading\" state={{ i: 1, hex: \"#A4D792\" }}/>\r\n//         let MemberList = this.state.guild.members.map(member => {\r\n//             return (\r\n//                 <Member key={member.id} member={member} />\r\n//             )\r\n//         });\r\n\r\n//         return (\r\n//             <div className=\"container\">\r\n//                 <div className=\"Menu\">  \r\n//                     <Link className=\"MenuButton\" to={`/guilds`}>\r\n//                         <img className=\"MenuButtonImage\" alt=\"RETURN BUTTON\" src=\"https://image.flaticon.com/icons/svg/2223/2223675.svg\" width=\"64px\" height=\"64px\" />\r\n//                     </Link>\r\n//                     <Link className=\"MenuButton\" to={`/guilds/${this.state.guild.id}/channels`}>\r\n//                         <img className=\"MenuButtonImage\" alt=\"CHANNELS BUTTON\" src=\"https://image.flaticon.com/icons/svg/1936/1936899.svg\" width=\"64px\" height=\"64px\" />\r\n//                     </Link>\r\n//                     <Link className=\"MenuButton\" to={`/guilds/${this.state.guild.id}/members`}>\r\n//                         <img className=\"MenuButtonImage\" alt=\"MEMBERS BUTTON\" src=\"https://image.flaticon.com/icons/svg/2622/2622686.svg\" width=\"64px\" height=\"64px\" />\r\n//                     </Link>\r\n//                     <button className=\"MenuButton\" onClick={ () => { axios.post('http://localhost:5000/api/client/channel/send/677478216285421589', { message: Math.floor(Math.random() * 10023) }) } }>\r\n//                         <img className=\"MenuButtonImage\" alt=\"MESSAGE BUTTON\" src=\"https://image.flaticon.com/icons/svg/726/726580.svg\" width=\"64px\" height=\"64px\" />\r\n//                     </button>\r\n//                     <div className=\"FullGuild\">\r\n//                         <p className=\"FullGuild_name\"> {this.state.guild.name} </p>\r\n//                         <img alt=\"\" className=\"FullGuild_icon\" src={ this.state.guild.iconURL || 'https://cdn.discordapp.com/icons/657586144791363594/5f8627ef6dc69b914ed90c3e029a9fbc.webp?size=128' } />\r\n//                         <div className=\"guild-menu-container\">\r\n//                             <Switch>\r\n//                                 <Route path=\"/guilds/:id/channels\">\r\n//                                     { JSXChannels }\r\n//                                 </Route>\r\n//                                 <Route path=\"/guilds/:id/members\">\r\n//                                     <h1>{ this.state.guild.name}'s Members</h1>\r\n//                                     <div style={{ overflowY: \"scroll\", height: \"1500px\" }}>\r\n//                                         <InfiniteScroll>\r\n//                                             { MemberList }\r\n//                                         </InfiniteScroll>\r\n//                                     </div>\r\n//                                 </Route>\r\n//                             </Switch>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }","\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nexport default class index extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"NavBar\">\r\n                    <ul>\r\n                        <Link className=\"NavChild\" to=\"/client\">\r\n                            <img alt='' style={{ marginTop: \"1em\" }} src=\"https://i.imgur.com/2rxzMeV.png\" width=\"45px\" height=\"45px\" />\r\n                        </Link>\r\n                        <Link className=\"NavChild\" to=\"/guilds\">\r\n                            <img alt='' style={{ marginTop: \"1em\" }} src=\"https://i.imgur.com/mGUSbgL.png\" width=\"45px\" height=\"45px\" />\r\n                        </Link>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nimport React from 'react';\r\nimport './index.css';\r\n\r\nexport default function index({ guilds }) {\r\n    return (\r\n        <div className=\"footer\">\r\n            <h3>\r\n                <span style={{ fontSize: \"1.5em\" }}>&copy;</span>\r\n                BaseBOT 2020\r\n            </h3>\r\n        </div> \r\n    )\r\n}\r\n","import './index.css';\r\n\r\nimport React from 'react'\r\n\r\nexport default function index() {\r\n    return (\r\n        <div className=\"main\">\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        // Display fallback UI\r\n        this.setState({ hasError: true });\r\n        // You can also log the error to an error reporting service\r\n        console.log('ERROR')\r\n        console.log(error, info);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}  ","import React, { Component } from 'react';\r\nimport './index.css';\r\nimport GetData from '../Functions/GetData';\r\nimport LoadingPage from '../LoadingPage/index';\r\n\r\nexport default class index extends Component {\r\n    constructor({ AuthoredUser }) {\r\n        super();\r\n\r\n        this.state = {\r\n            loading: true,\r\n            client:  {},\r\n            user: { ...AuthoredUser }\r\n        }\r\n    }\r\n\r\n    LoadData = () => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                // console.log(this.state.user)\r\n                let user = await GetData('client/users/rbi/'+this.state.user.id);\r\n                let client = await GetData('client/user');\r\n                resolve({ u: user, c: client })\r\n            } catch (err) {\r\n                reject(err)\r\n            };\r\n        });\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: true }));\r\n        this.LoadData()\r\n        .then(data => {\r\n            this.setState(state => ({ ...state, user: { ...state.user, ...data.u }, client: data.c, loading: false }));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return <LoadingPage content=\"Loading\" state={{ i: 1, hex: \"#A4D792\" }}/>\r\n\r\n        console.log(this.state.user)\r\n        let Page;\r\n        if(!this.state.user.tag)\r\n            Page = <a id=\"login\" style={{ padding: \"20px\", background: \"#ff3333\", textDecoration: \"none\", color: \"white\"}} href=\"https://discordapp.com/api/oauth2/authorize?client_id=644900662890463243&redirect_uri=http%3A%2F%2Flocalhost%3A5000%2Flogin%2Fcallback&response_type=code&scope=identify%20guilds%20email%20connections\">Identify Yourself</a>;\r\n        else {\r\n            Page = (\r\n                <>\r\n                    <div className=\"main-page\">\r\n                        <div className=\"box\">\r\n                            <img src={this.state.client.avatarURL} alt=\"logo-bot\" />\r\n                            <div className=\"nm-btn\">\r\n                                <h1 className = \"name\" >{ this.state.client.username }</h1>\r\n                                <a href={`https://discordapp.com/api/oauth2/authorize?client_id=${this.state.client.id}&permissions=8&scope=bot`} >\r\n                                    <button className=\"btn\">Add Bot!</button>\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"box-info\">\r\n                            <h1 className=\"title\">Description</h1>\r\n                            <hr />\r\n                            <p className=\"description\">It description it bot :3 What are you doing? :3</p>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"main\">\r\n                { Page }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { Component } from 'react';\r\nimport GetData from '../Functions/GetData';\r\nimport { Link } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\nimport './index.css';\r\n\r\nexport default class index extends Component {\r\n    constructor({ AuthoredUser }) {\r\n        super();\r\n\r\n        this.state = {\r\n            isBarOpen: false,\r\n            user: { ...AuthoredUser }\r\n        };\r\n    }\r\n    toggleBar(e, state) {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isBarOpen: !prevState.isBarOpen\r\n        }));\r\n    };\r\n\r\n    LoadData = () => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                // console.log(this.state.user)\r\n                let user = await GetData('client/users/rbi/'+this.state.user.id);\r\n                resolve(user)\r\n            } catch (err) {\r\n                reject(err)\r\n            };\r\n        });\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.setState(state => ({ ...state, loading: true }));\r\n        this.LoadData()\r\n        .then(data => {\r\n            this.setState(state => ({ ...state, user: { ...state.user, ...data }, loading: false }));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let bar;\r\n        if(this.state.isBarOpen) \r\n            bar = (\r\n                <div className=\"user-menu-bar\">\r\n                    <ul className=\"btns\">\r\n                        <Link className=\"btn\" to=\"/client\">\r\n                            <img alt='Logo for usr-bar' src=\"https://i.imgur.com/2rxzMeV.png\" width=\"45px\" height=\"45px\" />\r\n                        </Link>\r\n                        <Link className=\"btn\" to=\"/guilds\">\r\n                            <img alt='Logo for usr-bar' src=\"https://i.imgur.com/mGUSbgL.png\" width=\"45px\" height=\"45px\" />\r\n                        </Link>\r\n\r\n                        <Link className=\"btn\" onClick={(e) => {\r\n                            Cookies.set('accessToken', null);\r\n                            window.location.reload(false);\r\n                        }} to=\"/\">\r\n                            <img alt='Logo for usr-bar' style={{ marginLeft: \"10px\" }} src=\"https://i.imgur.com/T2tYO8U.png\" width=\"45px\" height=\"45px\" />\r\n                        </Link>\r\n                    </ul>\r\n                </div>\r\n            )\r\n        else \r\n            bar = null;\r\n        return (\r\n            <header id=\"header\">\r\n                <div className=\"header-links\">\r\n                    <a href=\"/\">Home</a>\r\n                    <a href=\"/docs\">Docs</a>\r\n                    <a href=\"https://discord.gg/6hagHQ2\">Discord</a>\r\n                </div>\r\n            \r\n                <div className=\"right-content\">\r\n                    <span>{this.state.user.tag}</span>\r\n                    <div className=\"user-menu\">\r\n                        <a onClick={(e) => this.toggleBar(e, this.state)} ><img className=\"logo\" src={this.state.user.avatarURL} /></a>\r\n                        { bar }\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\n","/* eslint-disable */\r\nimport React, { Component } from 'react'\r\nimport './index.css';\r\n\r\nexport default class index extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            loading: false,\r\n            commands: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        let CSSGray = { color: \"gray\" };\r\n        let CSSRed = { color: \"red\" };\r\n        let CSSBlue = { color: \"blue\" };\r\n        let CSSYellow = { color: \"yellow\" };\r\n        let CSSPurple = { color: \"#a142f5\" };\r\n\r\n        let comment = (str) => (<a style={CSSGray}>// {str}</a>);\r\n        let bool = (str) => (<a style={{ color: \"#bf5108\" }}>{str}</a>);\r\n        let array = (array) => (\r\n            <>\r\n                <a style={CSSPurple}>[</a>\r\n                {array.map(e => (\r\n                    <>\r\n                        <a style={{ color: \"#878787\" }}>\"</a><a style={{ color: \"#66a840\" }}>{e}</a><a style={{ color: \"#878787\" }}>\"</a>\r\n                    </>\r\n                ))}\r\n                <a style={CSSPurple}>]</a>\r\n            </>\r\n        );\r\n        let str = (str) => (\r\n            <>\r\n                <a style={{ color: \"#878787\"}}>\"</a><a style={{ color: \"#66a840\" }}>{str}</a><a style={{ color: \"#878787\"}}>\"</a>\r\n            </>\r\n        );\r\n        return (\r\n            <div className=\"main\" style={{ fontWeight: \"normal\" }}>\r\n                <h1>Bot Documentation</h1>\r\n                <hr />\r\n                <br />\r\n                <h2> Create you own command </h2>\r\n                <h3 style={CSSYellow}>BaseCommand</h3>\r\n                <h4>To create a command you should create a file {\"{commandname}.js\"} <br />which should have following code<br /> Do not forget to require BaseCommand file in classes folder</h4>\r\n                <h3 className=\"embed\" style={{ borderLeftColor: \"blue\", fontWeight: \"normal\" }}>\r\n                    <h4><span style={CSSGray}>module<span style={CSSBlue}>.</span>exports</span> <span style={CSSPurple}>= class extends</span> <span style={CSSYellow}>BaseCommand</span> {\"{\"}</h4>\r\n                    <h4 style={{ marginLeft: \"20px\"}}><a style={CSSPurple}>constructor()</a> {\"{\"}</h4>\r\n                    <h4 style={{ marginLeft: \"40px\"}}><a style={CSSRed}>super</a><a style={CSSYellow}>(</a>{\"{\"}</h4>\r\n                    <h4 style={{ marginLeft: \"60px\"}}>\r\n                        <h5>name<span style={CSSBlue}>:</span> {str(\"Command name\")}, {comment(\"Name of command\")} </h5>\r\n                        <h5>aliases<span style={CSSBlue}>:</span> {array([\"aliases\"])}, {comment(\"Aliases of command. Each of them is Array element\")}</h5>\r\n                        <h5>category<span style={CSSBlue}>:</span> {str(\"category name\")}, {comment(\"Category of command\")} </h5>\r\n                        <h5>usage<span style={CSSBlue}>:</span> {str(\"usage\")}, {comment(\"Usage of command\")} </h5>\r\n                        <h5>description<span style={CSSBlue}>:</span> {str(\"description\")}, {comment(\"Description of command\")}</h5>\r\n                        <h5>guildOnly<span style={CSSBlue}>:</span> {bool(\"true\")}, {comment(\"Check can user use command only in guild or dm also.\")}</h5>\r\n                        <h5>allowed_guilds<span style={CSSBlue}>:</span> {array([])}, {comment(\"Allowed guild array. Each element is id of guild. Empty Array to disable this.\")}</h5>\r\n                        <h5>cooldown<span style={CSSBlue}>:</span> {bool(\"0\")}, {comment(\"cooldown of command\")}</h5>\r\n                        <h5>invisible<span style={CSSBlue}>:</span> {bool(\"false\")} {comment(\"makes command invisible\")}</h5>\r\n                    </h4>\r\n                    <h4 style={{ marginLeft: \"40px\"}}>{\"}\"}<span style={CSSYellow}>)</span>;</h4>\r\n                    <br />\r\n                    <h4 style={{ marginLeft: \"40px\"}}><span style={CSSRed}>this</span><span style={CSSGray}>.</span><span style={{ color: \"#517ba6\" }}>execute</span> <span style={CSSPurple}>=</span> <span style={CSSYellow}>(</span><span style={CSSRed}>client</span>, <span style={CSSRed}>message</span>, <span style={CSSRed}>args</span>, <span style={CSSGray}>...</span><span style={CSSRed}>params</span><span style={CSSYellow}>)</span> <span style={CSSPurple}>=></span> {\"{\"}</h4>\r\n                    <h4 style={{ marginLeft: \"60px\"}}>{comment(\"Code..\")}</h4>\r\n                    <h4 style={{ marginLeft: \"40px\"}}>{\"}\"};</h4>\r\n                    <h4 style={{ marginLeft: \"20px\"}}>{\"}\"};</h4>\r\n                    <h4>{\"}\"};</h4> \r\n                </h3>\r\n                <br />\r\n                <hr />\r\n                <br />\r\n                <h2>What does that file/folder?</h2> \r\n                <h3 style={{ marginLeft: \"20px\", color: \"yellow\" }}> SysLoader.js</h3>\r\n                <h4 style={{ marginLeft: \"30px\"}}> Loads all files in <span style={CSSBlue}>system</span> folder (and all files in subdirectories) <br /> Before initialization of client</h4>\r\n                <h4 className=\"embed\" style={{ fontWeight: \"normal\", marginLeft: \"30px\", borderLeftColor: \"#ff2233\" }}>\r\n                    <span style={CSSBlue}>system</span><span style={CSSYellow}>/</span>ConfigManager: <br />\r\n                    - Loads all configuration on start; <br />\r\n                    - Creates config with friendly interface on init if config folder does not exist. <br />\r\n                    <br />\r\n                    <span style={CSSBlue}>system</span><span style={CSSYellow}>/</span>DataBaseManager - connects client to MongoDataBase Server<br />\r\n                </h4>\r\n                <br />\r\n                <h3 style={{ marginLeft: \"20px\", color: \"yellow\" }}> ModLoader.js</h3>\r\n                <h4 style={{ marginLeft: \"30px\"}}> Loads all files in <a style={CSSBlue}>modules</a> folder (and all files in subdirectories) <br /> After initialization of client</h4>\r\n                <h4 className=\"embed\" style={{ fontWeight: \"normal\", marginLeft: \"30px\", borderLeftColor: \"#ff0055\"}}>\r\n                    <span style={CSSBlue}>modules</span><span style={CSSYellow}>/</span>EventHandler - handles event if exist file with name of that event in events folder. \r\n                    <br />For example: folder: client, file: ready.js event name: ready. <br />\r\n                    <br /><span style={CSSBlue}>modules</span><span style={CSSYellow}>/</span>CommandHandler - loads all files in commands folder (also loads folders in command folder as categories). <br />\r\n                    <br /><span style={CSSBlue}>modules</span><span style={CSSYellow}>/</span>webLoader - Launches WebServer (Express.js) (Website) and API. <br />\r\n                </h4>\r\n                <br />\r\n                <h3 style={{ marginLeft: \"20px\", color: \"yellow\" }}> react-app (folder)</h3>\r\n                <h4 className=\"embed\" style={{ fontWeight: \"normal\", marginLeft: \"30px\", borderLeftColor: \"#ff0055\" }}> Source Files of React app which is builded at  <a style={CSSBlue}>server/build</a></h4>\r\n                <br />\r\n                <h3 style={{ marginLeft: \"20px\", color: \"yellow\" }}> server (folder)</h3>\r\n                <span style={{ color: \"#ff3333\", marginLeft: \"30px\", fontSize: \"35px\" }}>server/build</span>\r\n                <h4 className=\"embed\" style={{ fontWeight: \"normal\", marginLeft: \"30px\", borderLeftColor: \"#ff0055\" }}>Build of <span style={{ color: \"#ff4444\"}}>react-app</span></h4>\r\n                <span style={{ color: \"#ff3333\", marginLeft: \"30px\", fontSize: \"35px\" }}>server/routes/api</span>\r\n                <h4 className=\"embed\" style={{ fontWeight: \"normal\", marginLeft: \"30px\", borderLeftColor: \"#ff0055\" }}>\r\n                    API of Client for <span style={{ color: \"#ff4444\"}}>react-app</span> <br />\r\n                </h4>\r\n                <h4 className=\"embed\" style={{ marginLeft: \"40px\", color: \"#fff222\"}}>\r\n                    methods/channel\r\n                    <br/>\r\n                    <br/>\r\n                    <h4 className=\"embed\" style={{ marginLeft: \"0px\", color: \"#f33666\"}}>\r\n                        Here's Api methods for Client's channels. \r\n                    </h4>\r\n                    <br />\r\n                    <div style={{ color: \"gray\" }}>\r\n                        <br /><h3>{\"{APILINK}/client/channel/create/:GuildID/\"}</h3>\r\n                        <h4>\r\n                            {\"JSON: {\"}\r\n                            <br />\r\n                            name: \"example\",<br />\r\n                            type: \"text, voice, category\",<br />\r\n                            topic: \"hello world!\",<br />\r\n                            nsfw: \"true, false\",<br />\r\n                            parent: \"id\",<br />\r\n                            position: \"number\",<br />\r\n                            {\"}\"}\r\n                        </h4>\r\n                        <br /><h3>{\"{APILINK}/client/channel/delete/:ChannelID\"}</h3>\r\n                        <h4>Nothing needed to add in post request</h4>\r\n                        <br /><h3>{\"{APILINK}/client/channel/edit/:ChannelID\"}</h3>\r\n                        <h4>\r\n                            Same as create method\r\n                        </h4>\r\n                        <br /><h3>{\"{APILINK}/client/channel/editmsg/:ChannelID/:MessageID\"}</h3>\r\n                        <h4>\r\n                            Same as send method\r\n                        </h4>\r\n                        <br /><h3>{\"{APILINK}/client/channel/join/:ChannelID\"}</h3>\r\n                        <h4>\r\n                            {\"JSON: {\"}\r\n                            <br />\r\n                                \"url\": \"Link to audio\"\r\n                            <br />\r\n                            {\"}\"}\r\n                        </h4>\r\n                        <br /><h3>{\"{APILINK}/client/channel/send/:ChannelID\"}</h3>\r\n                        <h4>\r\n                            {\"JSON: {\"}\r\n                            <br />\r\n                                \"message\": \"raw message sting\",<br/>\r\n                                \"embed\": Embed Object in JSON\r\n                            <br />\r\n                            {\"}\"}\r\n                        </h4>\r\n                        <br /><h3>{\"{APILINK}/client/channel/usend/:UserID\"}</h3>\r\n                        <h4>Same as send method</h4>\r\n                    </div>\r\n                </h4>\r\n                <br />\r\n                <hr />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable */\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport getData from './Functions/GetData';\nimport Client from './Client/index';\nimport Guilds from './Guilds/index';\nimport FullGuild from './Guilds/Guild/FullGuild';\nimport Navigator from './Navigator/index';\nimport Footer from './Footer/index';\nimport MainPage from './MainPage/index';\nimport ErrorBoundary from './ErrorBoundary/index';\nimport User from './User/index';\nimport LoadingPage from './LoadingPage/index';\nimport Header from './Header/index';\nimport Docs from './Docs/index';\nimport axios from 'axios';\nimport DiscordOAuth2 from 'discord-oauth2';\nimport Cookies from 'js-cookie';\nimport './App.css';\n\nfunction App() {\n  const [loading, setLoading] = useState({ v: true, jsxv: `Loading`, l: \"first\", state: { i: -1, hex: \"#A4D792\" }});\n  const [MemberListLoading, setMemberListLoading] = useState(true)\n  const [guilds, setGuilds] = useState([]);\n  const [MemberPage, setMemberPage] = useState(0);\n  const [AuthoredUser, setAuthoredUser] = useState(null);\n  const observer = useRef();\n  const oauth = new DiscordOAuth2();\n  const LastMemberElementRef = useCallback(node => {\n   // if(node == null) return console.log(`НОДЕЕЕЕЕ ТУТ: ${node}`)\n    // setTimeout(() => {\n        if(MemberListLoading)\n          return;\n        if(observer.current)\n          observer.current.disconnect();\n        observer.current = new IntersectionObserver(entries => {\n          if(entries[0].isIntersecting) {\n            console.log(`VISIBLE`);\n            setMemberPage(p => p+10);\n          }\n        });\n        console.log(node, MemberPage)\n        if(node) \n          observer.current.observe(node)\n    // }, 1000)\n  }, [MemberListLoading]);\n\n  const ShowGuild = (props, guilds) => {\n    const { match } = props;\n    let { id } = match.params;\n    let BaseGuild = guilds.filter(g => g.id === id)[0];\n    if(BaseGuild) {\n      BaseGuild.members = BaseGuild.members.slice(0, 50);\n      return (<FullGuild guild={BaseGuild} from={MemberPage} />)\n    }\n    else\n      return (<Guilds  />);\n  };\n\n  useEffect(() => {\n    setLoading({ v: true, jsxv: `Maintance`, l: \"loading\", state: { i: 2, hex: \"#bd8700\" } });\n    new Promise(async (resolve, reject) => {\n      try {\n        let guilds = await getData('client/guilds/cache');\n        setGuilds(guilds);\n        console.log(\"COOK\", Cookies.get('accessToken'))\n        if(Cookies.get('accessToken') !== 'null') {\n          oauth.getUser(Cookies.get('accessToken'))\n          .then(data => {\n            // console.log(\"data\", data);\n            setAuthoredUser(data)\n            // setLoading({ v: false, jsxv: `Maintance`, l: \"loading\", state: { i: 2, hex: \"#bd8700\" } });\n            resolve({ v: false, jsxv: ``, l: \"Ready\", state: { i: 2, hex: \"#4aff53\" } });\n          });\n        } else resolve({ v: false, jsxv: ``, l: \"Ready\", state: { i: 2, hex: \"#4aff53\" } });\n      } catch (err) {\n        console.log(err)\n        reject({ v: true, jsxv: `ERROR ${err.stack}`, l: \"error\", state: { i: 2, hex: \"#D10000\" }});\n      }\n    })\n    .then(setLoading)\n    .catch(setLoading);\n  }, []);\n\n  if(loading.v) \n    return (<LoadingPage content={ loading.jsxv } state={ loading.state } />);\n\n  return (\n    <Router>\n      <ErrorBoundary>\n        <Header AuthoredUser={AuthoredUser} />\n        <Navigator />\n        <br/>\n        <Switch>\n          <Route path=\"/client\">\n            <Client getData={getData} LoadingPage={LoadingPage} />\n          </Route>\n          <Route path=\"/guilds/:id\" component={(props) => ShowGuild(props, guilds)}>\n          </Route>\n          <Route path=\"/guilds\">\n            <Guilds />\n          </Route>\n          <Route path=\"/user\">\n            <User />\n          </Route>\n          <Route path=\"/docs\">\n            <Docs />\n          </Route>\n          <Route>\n            <User AuthoredUser={AuthoredUser} />\n            <MainPage />\n          </Route>\n        </Switch>\n        <br/>\n        <Footer />\n      </ErrorBoundary>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}